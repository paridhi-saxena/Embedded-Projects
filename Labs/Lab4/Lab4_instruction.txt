Lab 4 - Instructions:


—————  Given:  ——————————
server.py 

It is a HTTP server and handles POST requests. (you can use in your client side curl library to upload an image file to the HTTP server using POST method)
It open the port 8000 to accept requests

 +++ test the server script on your local machine:
Navigate with your browser to “http://localhost:8000” and you'll see an empty table of groups. 



————— Develop your won HTTP client to send the data to the server: ——————

client.c
should use the port 8000 to connect to the server and send your POST request.

Use curl library to implement your web requests.


If you are running server.py script on your local machine: 
   - step 1. : find your computer IP address 
   - step 2. : find your Galileo board IP address using the command “ifconfig”
   - step 3. : modify your client.c application including you computer local IP address
   - step 4. : use ssh to transfer your client.c application to your galileo 
   - step 5. : Run the server.py script on your computer
   - step 6. : Compile your client.c application on your galileo (remember you need to use curl library to develop the web client), compiling example: “gcc myClient.c -lcurl -0 myClient” 
   - step 7. : Run your application on the galileo,  example:  “./myClient”

If you are using the real server (in campus network ONLY):

  server URL:  kew.uml.edu
  server port: 8000

test if the server is up by using your web browser and type: kew.uml.edu:8000  
then hit enter

If the server is up: you will see an empty data table in blue color showing “ID, Group Name , Value, Status, Last Update, Image” fields
If not , please contact with the TA


— curl library uses the URL to send data to the server. Make sure you include this URL format to your POST request:  "http://servername_variable:portnumber_variable/update?id=var_xxxx&password=var_xxxx&name=var_xxxx&data=var_xxxx&status=var_xxxx&timestamp=var_xxxx&filename=var_xxxx" 



—————  Develop your own thread in C ————s
Use POSIX 